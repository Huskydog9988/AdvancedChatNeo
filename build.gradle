buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    alias(libs.plugins.fabric.loom)
}

version = libs.versions.mod.version.get()
group = project.maven_group

dependencies {
    // required for plugins{fabric-loom}
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    minecraft(libs.minecraft)
    mappings(variantOf(libs.yarn.mappings) {
        classifier("v2")
    })
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://masa.dy.fi/maven' }
        maven { url 'https://maven.terraformersmc.com/releases/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.wispforest.io' }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    java {
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(ProcessResources).configureEach {
        // inputs.property "version", project.mod_version
        // inputs.property "loader_version", libs.versions.fabric.loader
        // inputs.property "fabric_version", libs.versions.fabric.api
        // inputs.property "minecraft_version", libs.versions.minecraft
        // inputs.property "malilib_version", libs.versions.malilib

        filesMatching("fabric.mod.json") {
            filter { line ->
                line.replaceAll('\\$\\{version\\}', project.version.toString())
                        .replaceAll('\\$\\{loader_version\\}', libs.versions.fabric.loader.get())
                        .replaceAll('\\$\\{fabric_version\\}', libs.versions.fabric.api.get())
                        .replaceAll('\\$\\{minecraft_version\\}', libs.versions.minecraft.get())
                        .replaceAll('\\$\\{malilib_version\\}', libs.versions.malilib.get())
                // for modules that depends on the core mod
                        .replaceAll('\\$\\{core_mod_version\\}', project.version.toString())
                        .replaceAll('\\$\\{github\\}', "https://github.com/Huskydog9988/adv-chat-neo")
            }
        }

        doLast {
            println "Done processing"
        }
    }

    // tasks.register('copyArchivesToDist', Copy) {
    //     dependsOn tasks.withType(AbstractArchiveTask)
    //
    //     duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // or INCLUDE
    //
    //     from {
    //         tasks.withType(AbstractArchiveTask).collect { it.archiveFile.get().asFile }
    //     }
    //
    //     into rootProject.layout.projectDirectory.dir("dist")
    // }

    // tasks.named('build') {
    //     finalizedBy tasks.named('copyArchivesToDist')
    // }

    tasks.withType(AbstractArchiveTask).configureEach {
        destinationDirectory.set(rootProject.layout.projectDirectory.dir("dist"))
        // finalizedBy tasks.named('copyArchivesToDist')
    }
}