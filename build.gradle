buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'fabric-loom' version '1.7.2'
}

version = project.mod_version
group = project.maven_group

dependencies {
    // required for plugins{fabric-loom}
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://masa.dy.fi/maven' }
        maven { url 'https://maven.terraformersmc.com/releases/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.wispforest.io' }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
        it.options.encoding = "UTF-8"
    }

    processResources {
        inputs.property "version", project.mod_version
        inputs.property "loader_version", project.loader_version
        inputs.property "fabric_version", project.fabric_api_version
        inputs.property "minecraft_version", project.minecraft_version
        inputs.property "malilib_version", project.malilib_version

        filesMatching("fabric.mod.json") {
            filter { line ->
                line.replaceAll('\\$\\{version\\}', project.version.toString())
                        .replaceAll('\\$\\{loader_version\\}', project.loader_version.toString())
                        .replaceAll('\\$\\{fabric_version\\}', project.fabric_version.toString())
                        .replaceAll('\\$\\{minecraft_version\\}', project.minecraft_version.toString())
                        .replaceAll('\\$\\{malilib_version\\}', project.malilib_version.toString())
                        // for modules that depends on the core mod
                        .replaceAll('\\$\\{core_mod_version\\}', project.version.toString())
            }
        }
    }

    // tasks.register('copyArchivesToDist', Copy) {
    //     dependsOn tasks.withType(AbstractArchiveTask)
    //
    //     duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // or INCLUDE
    //
    //     from {
    //         tasks.withType(AbstractArchiveTask).collect { it.archiveFile.get().asFile }
    //     }
    //
    //     into rootProject.layout.projectDirectory.dir("dist")
    // }

    // tasks.named('build') {
    //     finalizedBy tasks.named('copyArchivesToDist')
    // }

    tasks.withType(AbstractArchiveTask).configureEach {
        destinationDirectory.set(rootProject.layout.projectDirectory.dir("dist"))
        // finalizedBy tasks.named('copyArchivesToDist')
    }
}