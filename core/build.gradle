plugins {
	alias(libs.plugins.fabric.loom)
	alias(libs.plugins.lombok)
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
def finalFileName = "${project.archives_base_name}-Core-${project.minecraft_version}-${project.mod_version}.jar"

base {
	archivesName = project.archives_base_name
}

dependencies {
	minecraft(libs.minecraft)
	mappings(variantOf(libs.yarn.mappings) {
		classifier("v2")
	})
	modImplementation(libs.fabric.loader)
	modImplementation(libs.fabric.api)

	modImplementation(libs.malilib)
	modCompileOnly(libs.modmenu)

	implementation(libs.konstruct.addons)
	implementation(libs.konstruct.core)
	include(libs.konstruct.addons)
	include(libs.konstruct.core)

	implementation(libs.night.config.toml)
	// Transitive
	include(libs.night.config.toml)
	include(libs.night.config.core)

	implementation(libs.mxparser)
	include(libs.mxparser)

	modImplementation(libs.owo.lib)
	include(libs.owo.sentinel)

	implementation(libs.apache.commons.csv)
	include(libs.apache.commons.csv)
}

tasks.register('downloadExtra') {
	def f = new File(project.projectDir.toString() + '/src/main/resources/swear_words.csv')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en.csv').withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

tasks {
	jar {
		// copy license into jar
		from("../LICENSE.txt") {
			rename { "${it}" }
		}
		// archiveBaseName.set(rootProjectName + "-core")
		// destinationDirectory = layout.buildDirectory.dir("devlibs")
	}

	remapJar {
		setArchiveFileName(finalFileName)
		// setDestinationDirectory(layout.buildDirectory.dir("devlibs"))

		doFirst {
			println "Building remapJar for :core"
		}
	}
}

tasks.named("build") {
	dependsOn tasks.named("downloadExtra")
	dependsOn tasks.named("remapJar")
}
