plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id "io.freefair.lombok" version "6.0.0-m2"
	id "com.diffplug.spotless" version "5.17.1"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group

minecraft {
}

repositories {
	mavenCentral()
	maven { url 'https://masa.dy.fi/maven' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "fi.dy.masa.malilib:malilib-fabric-1.17.1:${project.malilib_version}"
	modCompileOnly "io.github.prospector:modmenu:1.16.8"
	implementation 'com.electronwill.night-config:toml:3.6.5'
	// Transitive
	include 'com.electronwill.night-config:core:3.6.5'
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE.txt"
}

tasks.register('downloadExtra') {
	def f = new File('./src/main/resources/swear_words.txt')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en-us.csv').withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

build {
	dependsOn 'downloadExtra'
}

spotless {
	ratchetFrom 'origin/main'
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		target 'src/*/java/**/*.java'
		googleJavaFormat('1.12.0').aosp().reflowLongStrings()
		removeUnusedImports()
		licenseHeaderFile "HEADER.txt"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
