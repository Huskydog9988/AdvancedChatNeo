plugins {
	id 'fabric-loom' version '1.7.2'
	id "io.freefair.lombok" version "8.10"
}

base {
	archivesName = project.archives_base_name
}
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	modImplementation "fi.dy.masa.malilib:malilib-fabric-1.21:${project.malilib_version}"
	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	implementation "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	implementation "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation 'com.electronwill.night-config:toml:3.6.5'
	// Transitive
	include 'com.electronwill.night-config:toml:3.6.5'
	include 'com.electronwill.night-config:core:3.6.5'


	include "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	include "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"
	include "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	implementation 'org.apache.commons:commons-csv:1.8'
	include 'org.apache.commons:commons-csv:1.8'

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	from "LICENSE.txt"
}

tasks.register('downloadExtra') {
	def f = new File(project.projectDir.toString() + '/src/main/resources/swear_words.csv')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en.csv').withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}
build.dependsOn "downloadExtra"

java {
	withSourcesJar()
}

tasks {
	remapJar {
		archiveClassifier = "" // No classifier for consistent naming
		destinationDirectory = layout.buildDirectory.dir("devlibs")

		doFirst {
			println "Building remapJar for :core"
		}
	}
}
build.dependsOn remapJar

//
// task copyJar(type: Copy) {
// 	from remapJar
// 	into '../dist'
// }
// build.dependsOn copyJar
