plugins {
	alias(libs.plugins.fabric.loom)
	alias(libs.plugins.lombok)
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group
def finalFileName = "${project.archives_base_name}-Box-${project.minecraft_version}-${project.mod_version}.jar"

base {
	archivesName = project.archives_base_name
}

dependencies {
	minecraft(libs.minecraft)
	mappings(variantOf(libs.yarn.mappings) {
		classifier("v2")
	})
	modImplementation(libs.fabric.loader)
	modImplementation(libs.fabric.api)

	modImplementation(libs.malilib)

	implementation(project(path: ":core", configuration: "namedElements")) { transitive false }

	implementation(libs.mxparser)
	include(libs.mxparser)

	implementation(libs.languagetool.en)
	// Transitive
	include(libs.languagetool.en)
	include(libs.languagetool.core)
	include(libs.loomchild.segment)
	include(libs.jaxb.api)
	include(libs.trove4j)
	include(libs.jetbrains.trove4j)
	include(libs.unit.api)
	include(libs.indriya)
	include(libs.uom.lib)
	include(libs.morfologik.fsa)
	include(libs.morfologik.fsa.builders)
	include(libs.morfologik.speller)
	include(libs.morfologik.stemming)
	include(libs.apache.opennlp.tools)
	include(libs.opennlp.chunk.models)
	include(libs.opennlp.postag.models)
	include(libs.opennlp.tokenize.models)
	include(libs.hppc)
}

tasks {
	jar {
		// copy license into jar
		from("../../LICENSE.txt") {
			rename { "${it}" }
		}
		// archiveBaseName.set(rootProjectName + "-box")
		// destinationDirectory = layout.buildDirectory.dir("devlibs")
	}

	remapJar {
		setArchiveFileName(finalFileName)
		// setArchiveClassifier("Box")
		// setDestinationDirectory(layout.buildDirectory.dir("devlibs"))
	}
}

tasks.named("build") {
	dependsOn tasks.named("remapJar")
}