import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "io.freefair.lombok" version "6.0.0-m2"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
    mavenCentral()
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://jitpack.io' }
}

task unzip(type: Copy) {
    def zipPath = file("${buildDir}/dist/suggester-basic.zip")
    def dir = file("${buildDir}/dist/suggester-basic.zip")
    if (!zipPath.exists()) {
        new URL('http://www.softcorporation.com/products/suggester/suggester-basic.zip').withInputStream{ i -> dir.withOutputStream{ it << i }}
    }
    def distDir = file("${buildDir}/dist")
    if (!distDir.exists()) {
        distDir.mkdirs()
    }
    def zipFile = file(zipPath)
    def outputDir = file("${buildDir}/dist/unpacked")
    if (!outputDir.exists()) {
        outputDir.mkdir()
    }

    from zipTree(zipFile)
    into outputDir

}

task moveEnglish(type: Copy) {
    def englishFrom = file("${buildDir}/dist/unpacked/suggester-basic/dic/english.jar")
    def englishTo = file('src/main/resources/')
    from englishFrom
    into englishTo
    rename { String fileName ->
        fileName.replace(".jar", ".zip")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    //Fabric api
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation "fi.dy.masa.malilib:malilib-fabric-1.17.0:${project.malilib_version}"

    modImplementation "com.github.DarkKronicle:AdvancedChatCore:${project.advancedchat_version}"

    shadow 'com.google.code.findbugs:jsr305:3.0.0'

    shadow 'com.google.code.gson:gson:2.8.6'

    implementation "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"
    shadow "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"

    implementation files("${buildDir}/dist/unpacked/suggester-basic/lib/suggester-1.1.2.jar")
    shadow files("${buildDir}/dist/unpacked/suggester-basic/lib/suggester-1.1.2.jar")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

shadowJar {
    duplicatesStrategy = 'include'
    destinationDir = file("${buildDir}/tmp/allJar")
    configurations = [project.configurations.shadow]
    relocate 'org.mariuszgromada', 'io.github.darkkronicle.inscribe.shadow.org.mariusgromada'
    relocate 'com.google.code', 'io.github.darkkronicle.inscribe.shadow.com.google.code'
    relocate 'com.softcorporation', 'io.github.darkkronicle.inscribe.shadow.com.softcorporation'

    from('.') {
        include 'LICENSE.txt'
    }
    minimize()
}

task remapShadowJar(type: RemapJarTask) {
    dependsOn shadowJar
    addNestedDependencies = false
    input = shadowJar.archivePath
}

build {
    dependsOn 'unzip'
    dependsOn 'moveEnglish'
    dependsOn 'remapShadowJar'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
