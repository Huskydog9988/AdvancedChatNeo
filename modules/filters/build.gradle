plugins {
	alias(libs.plugins.fabric.loom)
	alias(libs.plugins.lombok)
}

def modVersion = "${libs.versions.minecraft.get()}-${libs.versions.mod.version.get()}"
version = modVersion
group = project.maven_group
def finalFileName = "${project.archives_base_name}-Filter-${modVersion}.jar"

base {
	archivesName = project.archives_base_name
}

dependencies {
	minecraft(libs.minecraft)
	mappings(variantOf(libs.yarn.mappings) {
		classifier("v2")
	})
	modImplementation(libs.fabric.loader)
	modImplementation(libs.fabric.api)
	modImplementation(libs.malilib)

	implementation(project(path: ":core", configuration: "namedElements")) { transitive false }

	implementation(libs.konstruct.addons)
	implementation(libs.konstruct.core)
	include(libs.konstruct.addons)
	include(libs.konstruct.core)

	implementation(libs.nashorn.core)
	implementation(libs.delight.nashorn.sandbox)

	include(libs.nashorn.core)
	include(libs.delight.nashorn.sandbox)
}

tasks {
	jar {
		// copy license into jar
		from("../../LICENSE.txt") {
			rename { "${it}" }
		}
		// archiveBaseName.set(rootProjectName + "-box")
		// destinationDirectory = layout.buildDirectory.dir("devlibs")
	}

	remapJar {
		setArchiveFileName(finalFileName)
		// setDestinationDirectory(layout.buildDirectory.dir("devlibs"))
	}
}

tasks.named('build') {
	dependsOn tasks.named("remapJar")

	// finalizedBy tasks.named('copyJar')
}

// // configure the maven publication
// publishing {
// 	publications {
// 		mavenJava(MavenPublication) {
// 			// add all the jars that should be included when publishing to maven
// 			artifact(remapJar) {
// 				builtBy remapJar
// 			}
// 			artifact(sourcesJar) {
// 				builtBy remapSourcesJar
// 			}
// 		}
// 	}
//
// 	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
// 	repositories {
//
// 	}
// }